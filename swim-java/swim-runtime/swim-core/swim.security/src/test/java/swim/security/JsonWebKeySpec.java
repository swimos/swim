// Copyright 2015-2023 Nstream, inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package swim.security;

import java.math.BigInteger;
import java.security.Key;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.interfaces.RSAPrivateCrtKey;
import java.security.interfaces.RSAPublicKey;
import org.testng.annotations.Test;
import static org.testng.Assert.assertEquals;

public class JsonWebKeySpec {

  @Test
  public void parseECPublicKey() {
    final ECPublicKey key = (ECPublicKey) JsonWebKey.parse("{\"kty\":\"EC\",\"crv\":\"P-256\",\"x\":\"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4\",\"y\":\"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM\",\"use\":\"enc\",\"kid\":\"1\"}").key();
    assertEquals(key.getW().getAffineX(), new BigInteger("21994169848703329112137818087919262246467304847122821377551355163096090930238"));
    assertEquals(key.getW().getAffineY(), new BigInteger("101451294974385619524093058399734017814808930032421185206609461750712400090915"));
    assertEquals(key.getParams(), JsonWebKey.p256);
  }

  @Test
  public void parseECPrivateKey() {
    final ECPrivateKey key = (ECPrivateKey) JsonWebKey.parse("{\"kty\":\"EC\",\"crv\":\"P-256\",\"x\":\"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4\",\"y\":\"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM\",\"d\":\"870MB6gfuTJ4HtUnUvYMyJpr5eUZNP4Bk43bVdj3eAE\",\"use\":\"enc\",\"kid\":\"1\"}").key();
    assertEquals(key.getS(), new BigInteger("110246039328358150430804407946042381407500908316371398015658902487828646033409"));
    assertEquals(key.getParams(), JsonWebKey.p256);
  }

  @Test
  public void parseRSAPublicKey() {
    final RSAPublicKey key = (RSAPublicKey) JsonWebKey.parse("{\"kty\":\"RSA\",\"n\":\"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\",\"e\":\"AQAB\",\"alg\":\"RS256\",\"kid\":\"2011-04-29\"}").key();
    assertEquals(key.getModulus(), new BigInteger("26634547600177008912365441464036882611104634136430581696102639463075266436216946316053845642300166320042915031924501272705275043130211783228252369194856949397782880847235143381529207382262647906987655738647387007320361149854766523417293323739185308113373529512728932838100141612048712597178695720651344295450174895369923383396704334331627261565907266749863744707920606364678231639106403854977302183719246256958550651555767664134467706614553219592981545363271425781391262006405169505726523023628770285432062044391310047445749287563161668548354322560223509946990827691654627968182167826397015368836435965354956581554819"));
    assertEquals(key.getPublicExponent(), new BigInteger("65537"));
  }

  @Test
  public void parseRSAPrivateKey() {
    final RSAPrivateCrtKey key = (RSAPrivateCrtKey) JsonWebKey.parse("{\"kty\":\"RSA\",\"n\":\"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\",\"e\":\"AQAB\",\"d\":\"X4cTteJY_gn4FYPsXB8rdXix5vwsg1FLN5E3EaG6RJoVH-HLLKD9M7dx5oo7GURknchnrRweUkC7hT5fJLM0WbFAKNLWY2vv7B6NqXSzUvxT0_YSfqijwp3RTzlBaCxWp4doFk5N2o8Gy_nHNKroADIkJ46pRUohsXywbReAdYaMwFs9tv8d_cPVY3i07a3t8MN6TNwm0dSawm9v47UiCl3Sk5ZiG7xojPLu4sbg1U2jx4IBTNBznbJSzFHK66jT8bgkuqsk0GjskDJk19Z4qwjwbsnn4j2WBii3RL-Us2lGVkY8fkFzme1z0HbIkfz0Y6mqnOYtqc0X4jfcKoAC8Q\",\"p\":\"83i-7IvMGXoMXCskv73TKr8637FiO7Z27zv8oj6pbWUQyLPQBQxtPVnwD20R-60eTDmD2ujnMt5PoqMrm8RfmNhVWDtjjMmCMjOpSXicFHj7XOuVIYQyqVWlWEh6dN36GVZYk93N8Bc9vY41xy8B9RzzOGVQzXvNEvn7O0nVbfs\",\"q\":\"3dfOR9cuYq-0S-mkFLzgItgMEfFzB2q3hWehMuG0oCuqnb3vobLyumqjVZQO1dIrdwgTnCdpYzBcOfW5r370AFXjiWft_NGEiovonizhKpo9VVS78TzFgxkIdrecRezsZ-1kYd_s1qDbxtkDEgfAITAG9LUnADun4vIcb6yelxk\",\"dp\":\"G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\",\"dq\":\"s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\",\"qi\":\"GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\",\"alg\":\"RS256\",\"kid\":\"2011-04-29\"}").key();
    assertEquals(key.getModulus(), new BigInteger("26634547600177008912365441464036882611104634136430581696102639463075266436216946316053845642300166320042915031924501272705275043130211783228252369194856949397782880847235143381529207382262647906987655738647387007320361149854766523417293323739185308113373529512728932838100141612048712597178695720651344295450174895369923383396704334331627261565907266749863744707920606364678231639106403854977302183719246256958550651555767664134467706614553219592981545363271425781391262006405169505726523023628770285432062044391310047445749287563161668548354322560223509946990827691654627968182167826397015368836435965354956581554819"));
    assertEquals(key.getPublicExponent(), new BigInteger("65537"));
    assertEquals(key.getPrivateExponent(), new BigInteger("12059247920106998877834196630336549090121729843146690429352176950239290491811731510997844908127818411197238472043208054457537365988720482227320941622579462890892342087370621321697913707583190432031443440085507647103423659911812976629405447233056832745596117326566758077192204434965308892626812916656046802247331184938896769174054449694355391205619574512571700767491962094928337936847130660365050240320266640217014023576113710333420737911211020431514635349872426319659058955767361242629552548559609520925023969398746716026853807111476253694189033806037624091536502224795278572727576279224349624427644439187009145144049"));
    assertEquals(key.getPrimeP(), new BigInteger("170971616247066886649949300732400720345210409658327460625264569060195570356075255995000326434957648933389549806770280623263046651914937533618940627146749024663149056492969053735348931398424539579724444098289604654242233173575809842449568201338389043642401230443496229062531480383139022143795969631711734885883"));
    assertEquals(key.getPrimeQ(), new BigInteger("155783446310106104635099160946784363821414853654965550496207235064048154917874782774156486075805650457593007417188525825045697252867222644400361049116649131900972223186707453028717132200988108509861413777141915906732412234602566205784553888885870066323934623297601869512681652807048545792342297108375492531993"));
    assertEquals(key.getPrimeExponentP(), new BigInteger("19341495076914626815733465304027021997335703147944516732162160535457679762881150311227740363287547632515222275468740719606821000004537084002179315648656442450105850204294864952528754404197926918291606703766103558395286887542778188991273611009396468705689346819477257766904319629531298505792198587813155964477"));
    assertEquals(key.getPrimeExponentQ(), new BigInteger("126294006223999381194858683190619040148245915887849225070021310194057441123969743558199311254613882455137923265981713621473411061569623362675062680632569159818584237760851941450917343652756445873894849861808247769055644817990889803920520204928439850677586256167125210630304849097323592573552933269223466037769"));
    assertEquals(key.getCrtCoefficient(), new BigInteger("19056734019852286198079387917604722000587388095884598882617821195913318622692083489885540169579581102450457100508979269579389593739001342783592522637946772397557504256085502029252160435142516130311236375661092366396531117762869783482123081301819792999713394710397682392804152123341375290541162928420868347157"));
  }

  @Test
  public void parseSymmetricKey() {
    final Key key = JsonWebKey.parse("{\"kty\":\"oct\",\"alg\":\"A128KW\",\"k\":\"GawgguFyGrWKav7AX4VKUg\"}").key();
    assertEquals(key.getEncoded(), new byte[] {25, -84, 32, -126, -31, 114, 26, -75, -118, 106, -2, -64, 95, -123, 74, 82});
  }

}
