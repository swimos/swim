plugins {
  id 'java-library'
  id 'checkstyle'
  id 'net.ltgt.errorprone'
}

group = 'org.swimos'
version = "$swimVersion"
ext.homepage = 'https://github.com/swimos/swim'
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

def javaVersion = System.getProperty('java.version').split('\\.')
ext.jvmVersion = (javaVersion[0] as Integer) > 1 ? javaVersion[0] as Integer : javaVersion[1] as Integer

ext.compilerArgs = ['-Xlint:all', '-Xlint:-requires-automatic']

repositories {
  mavenCentral()
  maven {
    url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
  }
}

dependencies {
  // ErrorProne and NullAway
  errorprone "com.google.errorprone:error_prone_core:$errorproneCoreVersion"
  annotationProcessor "com.uber.nullaway:nullaway:$nullawayVersion"
  testAnnotationProcessor "com.uber.nullaway:nullaway:$nullawayVersion"
}

tasks.named('compileJava') {
  options.javaModuleVersion = provider { project.version }
}

compileJava {
  options.compilerArgs += compilerArgs
  options.encoding = 'UTF-8'
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

compileTestJava {
  options.compilerArgs += compilerArgs
  options.encoding = 'UTF-8'
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile) {
  options.errorprone {
    option('NullAway:AnnotatedPackages', 'swim')
    error('NullAway')
    disable('NotJavadoc')
  }
}

testing.suites.test {
  useJUnitJupiter()
  targets.all {
    testTask.configure {
      // Run `gradle -Pslow test` to include slow tests.
      if (!project.hasProperty('slow')) {
        options.excludeTags 'slow'
      }
      // Run `gradle -Pbenchmark test --rerun` to include benchmark tests.
      if (!project.hasProperty('benchmark')) {
        options.excludeTags 'benchmark'
      }
      // Run `gradle -Pmanual test --rerun` to run manual tests.
      if (!project.hasProperty('manual')) {
        options.excludeTags 'manual'
      }

      // Pass -P*log.* properties through to tests.
      project.getProperties().each { prop ->
        if (prop.key.contains('log.')) {
          systemProperty prop.key, prop.value
        }
      }

      testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        displayGranularity = 2
        showStandardStreams true
      }
    }
  }
}

checkstyle {
  // Enforce checkstyle and fail the build if there are any violations
  if (project.hasProperty('enforceCheckstyle')) {
    ignoreFailures = false
    maxWarnings = 0
  }

  configFile = new File(gradle.swimCoreDir, 'checkstyle.xml')
  toolVersion "$checkstyleVersion"

  checkstyleMain {
    source = sourceSets.main.allJava
    exclude '*module-info*'
  }

  checkstyleTest {
    source = sourceSets.test.allJava
    exclude '*module-info*'
  }
}

javadoc {
  options.addBooleanOption('Xdoclint:all,-missing', true)
  options.charSet = 'UTF-8'
  options.encoding = 'UTF-8'
  options.addBooleanOption('html5', true)
  options.links += ["https://docs.oracle.com/en/java/javase/" + jvmVersion + "/docs/api/"]
}

jar {
  manifest {
    attributes('Implementation-Title': project.name,
               'Implementation-Version': archiveVersion)
  }
}
