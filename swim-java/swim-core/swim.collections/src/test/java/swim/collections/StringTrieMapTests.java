// Copyright 2015-2023 Nstream, inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package swim.collections;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class StringTrieMapTests {

  @Test
  public void testEmpty() {
    final StringTrieMap<String> trie = StringTrieMap.empty();
    assertTrue(trie.isEmpty());
    assertEquals(0, trie.size());
    assertFalse(trie.isDefined());
    assertEquals("", trie.prefix());
    assertNull(trie.value());
  }

  @Test
  public void testRoot() {
    StringTrieMap<String> trie = StringTrieMap.empty();
    trie = trie.updated("", "blank");
    assertFalse(trie.isEmpty());
    assertEquals(1, trie.size());
    assertTrue(trie.isDefined());
    assertEquals("", trie.prefix());
    assertEquals("blank", trie.value());
    trie = trie.removed("");
    assertTrue(trie.isEmpty());
    assertEquals(0, trie.size());
    assertFalse(trie.isDefined());
    assertEquals("", trie.prefix());
    assertNull(trie.value());
  }

  @Test
  public void testDepth1() {
    StringTrieMap<String> trie = StringTrieMap.empty();
    trie = trie.updated("a", "letter a");
    assertFalse(trie.isEmpty());
    assertEquals(1, trie.size());
    assertEquals("letter a", trie.get("a"));
    assertNull(trie.get("z"));
    trie = trie.updated("z", "letter z");
    assertFalse(trie.isEmpty());
    assertEquals(2, trie.size());
    assertEquals("letter a", trie.get("a"));
    assertEquals("letter z", trie.get("z"));
  }

  @Test
  public void testRootDepth1() {
    StringTrieMap<String> trie = StringTrieMap.empty();
    trie = trie.updated("", "blank");
    trie = trie.updated("a", "letter a");
    trie = trie.updated("z", "letter z");
    assertFalse(trie.isEmpty());
    assertEquals(3, trie.size());
    assertEquals("blank", trie.get(""));
    assertEquals("letter a", trie.get("a"));
    assertEquals("letter z", trie.get("z"));
  }

  @Test
  public void testUnicode() {
    StringTrieMap<String> trie = StringTrieMap.empty();
    trie = trie.updated("\0", "U+00");
    trie = trie.updated("√Ä", "U+C0");
    trie = trie.updated("√ñ", "U+D6");
    trie = trie.updated("√ò", "U+D8");
    trie = trie.updated("√∂", "U+F6");
    trie = trie.updated("√∏", "U+F8");
    trie = trie.updated("Àø", "U+2FF");
    trie = trie.updated("Õ∞", "U+370");
    trie = trie.updated("ÕΩ", "U+37D");
    trie = trie.updated("Õø", "U+37F");
    trie = trie.updated("·øø", "U+1FFF");
    trie = trie.updated("‚Å∞", "U+2070");
    trie = trie.updated("‚Üè", "U+218F");
    trie = trie.updated("‚∞Ä", "U+2C00");
    trie = trie.updated("‚øØ", "U+2FEF");
    trie = trie.updated("„ÄÅ", "U+3001");
    trie = trie.updated("Ìüø", "U+D7FF");
    trie = trie.updated("Ô§Ä", "U+F900");
    trie = trie.updated("Ô∑è", "U+FDCF");
    trie = trie.updated("Ô∑∞", "U+FDF0");
    trie = trie.updated("êÄÄ", "U+10000");
    trie = trie.updated("ÛØøø", "U+EFFFF");
    assertEquals(22, trie.size());
    assertEquals("U+00", trie.get("\0"));
    assertEquals("U+C0", trie.get("√Ä"));
    assertEquals("U+D6", trie.get("√ñ"));
    assertEquals("U+D8", trie.get("√ò"));
    assertEquals("U+F6", trie.get("√∂"));
    assertEquals("U+F8", trie.get("√∏"));
    assertEquals("U+2FF", trie.get("Àø"));
    assertEquals("U+370", trie.get("Õ∞"));
    assertEquals("U+37D", trie.get("ÕΩ"));
    assertEquals("U+37F", trie.get("Õø"));
    assertEquals("U+1FFF", trie.get("·øø"));
    assertEquals("U+2070", trie.get("‚Å∞"));
    assertEquals("U+218F", trie.get("‚Üè"));
    assertEquals("U+2C00", trie.get("‚∞Ä"));
    assertEquals("U+2FEF", trie.get("‚øØ"));
    assertEquals("U+3001", trie.get("„ÄÅ"));
    assertEquals("U+D7FF", trie.get("Ìüø"));
    assertEquals("U+F900", trie.get("Ô§Ä"));
    assertEquals("U+FDCF", trie.get("Ô∑è"));
    assertEquals("U+FDF0", trie.get("Ô∑∞"));
    assertEquals("U+10000", trie.get("êÄÄ"));
    assertEquals("U+EFFFF", trie.get("ÛØøø"));
  }

  @Test
  public void testCaseSensitive() {
    StringTrieMap<String> trie = StringTrieMap.caseSensitive();
    trie = trie.updated("foo", "lowercase foo");
    assertEquals("lowercase foo", trie.get("foo"));
    trie = trie.updated("FOO", "uppercase FOO");
    assertEquals("uppercase FOO", trie.get("FOO"));
    trie = trie.updated("bar", "lowercase bar");
    assertEquals("lowercase bar", trie.get("bar"));
    trie = trie.updated("BAR", "uppercase BAR");
    assertEquals("uppercase BAR", trie.get("BAR"));
    trie = trie.updated("baz", "lowercase baz");
    assertEquals("lowercase baz", trie.get("baz"));
    trie = trie.updated("BAZ", "uppercase BAZ");
    assertEquals("uppercase BAZ", trie.get("BAZ"));
    assertEquals(6, trie.size());
    assertEquals("lowercase foo", trie.get("foo"));
    assertEquals("uppercase FOO", trie.get("FOO"));
    assertEquals("lowercase bar", trie.get("bar"));
    assertEquals("uppercase BAR", trie.get("BAR"));
    assertEquals("lowercase baz", trie.get("baz"));
    assertEquals("uppercase BAZ", trie.get("BAZ"));
  }

  @Test
  public void testCaseInsensitive() {
    StringTrieMap<String> trie = StringTrieMap.caseInsensitive();
    trie = trie.updated("foo", "lowercase foo");
    assertEquals("lowercase foo", trie.get("foo"));
    trie = trie.updated("FOO", "uppercase FOO");
    assertEquals("uppercase FOO", trie.get("FOO"));
    trie = trie.updated("bar", "lowercase bar");
    assertEquals("lowercase bar", trie.get("bar"));
    trie = trie.updated("BAR", "uppercase BAR");
    assertEquals("uppercase BAR", trie.get("BAR"));
    trie = trie.updated("baz", "lowercase baz");
    assertEquals("lowercase baz", trie.get("baz"));
    trie = trie.updated("BAZ", "uppercase BAZ");
    assertEquals("uppercase BAZ", trie.get("BAZ"));
    assertEquals(3, trie.size());
    assertEquals("uppercase FOO", trie.get("foo"));
    assertEquals("uppercase FOO", trie.get("FOO"));
    assertEquals("uppercase BAR", trie.get("bar"));
    assertEquals("uppercase BAR", trie.get("BAR"));
    assertEquals("uppercase BAZ", trie.get("baz"));
    assertEquals("uppercase BAZ", trie.get("BAZ"));
  }

}
